<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.springboot.mapper.OrderDeliveryInfoMapper" >
  <resultMap id="BaseResultMap" type="com.example.springboot.entity.OrderDeliveryInfo" >
    <id column="orderID" property="orderID" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="SMALLINT" />
    <result column="deliverName" property="deliverName" jdbcType="VARCHAR" />
    <result column="deliverPhone" property="deliverPhone" jdbcType="VARCHAR" />
    <result column="deliverAddress" property="deliverAddress" jdbcType="VARCHAR" />
    <result column="deliveryTime" property="deliveryTime" jdbcType="BIGINT" />
    <result column="expressName" property="expressName" jdbcType="VARCHAR" />
    <result column="expressNumber" property="expressNumber" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    orderID, state, deliverName, deliverPhone, deliverAddress, deliveryTime, expressName, 
    expressNumber
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.springboot.entity.OrderDeliveryInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ylfs_order_delivery_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ylfs_order_delivery_info
    where orderID = #{orderID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ylfs_order_delivery_info
    where orderID = #{orderID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.springboot.entity.OrderDeliveryInfoExample" >
    delete from ylfs_order_delivery_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.springboot.entity.OrderDeliveryInfo" >
    insert into ylfs_order_delivery_info (orderID, state, deliverName, 
      deliverPhone, deliverAddress, deliveryTime, 
      expressName, expressNumber)
    values (#{orderID,jdbcType=INTEGER}, #{state,jdbcType=SMALLINT}, #{deliverName,jdbcType=VARCHAR}, 
      #{deliverPhone,jdbcType=VARCHAR}, #{deliverAddress,jdbcType=VARCHAR}, #{deliveryTime,jdbcType=BIGINT}, 
      #{expressName,jdbcType=VARCHAR}, #{expressNumber,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.springboot.entity.OrderDeliveryInfo" >
    insert into ylfs_order_delivery_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderID != null" >
        orderID,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="deliverName != null" >
        deliverName,
      </if>
      <if test="deliverPhone != null" >
        deliverPhone,
      </if>
      <if test="deliverAddress != null" >
        deliverAddress,
      </if>
      <if test="deliveryTime != null" >
        deliveryTime,
      </if>
      <if test="expressName != null" >
        expressName,
      </if>
      <if test="expressNumber != null" >
        expressNumber,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderID != null" >
        #{orderID,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=SMALLINT},
      </if>
      <if test="deliverName != null" >
        #{deliverName,jdbcType=VARCHAR},
      </if>
      <if test="deliverPhone != null" >
        #{deliverPhone,jdbcType=VARCHAR},
      </if>
      <if test="deliverAddress != null" >
        #{deliverAddress,jdbcType=VARCHAR},
      </if>
      <if test="deliveryTime != null" >
        #{deliveryTime,jdbcType=BIGINT},
      </if>
      <if test="expressName != null" >
        #{expressName,jdbcType=VARCHAR},
      </if>
      <if test="expressNumber != null" >
        #{expressNumber,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.springboot.entity.OrderDeliveryInfoExample" resultType="java.lang.Integer" >
    select count(*) from ylfs_order_delivery_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ylfs_order_delivery_info
    <set >
      <if test="record.orderID != null" >
        orderID = #{record.orderID,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=SMALLINT},
      </if>
      <if test="record.deliverName != null" >
        deliverName = #{record.deliverName,jdbcType=VARCHAR},
      </if>
      <if test="record.deliverPhone != null" >
        deliverPhone = #{record.deliverPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.deliverAddress != null" >
        deliverAddress = #{record.deliverAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.deliveryTime != null" >
        deliveryTime = #{record.deliveryTime,jdbcType=BIGINT},
      </if>
      <if test="record.expressName != null" >
        expressName = #{record.expressName,jdbcType=VARCHAR},
      </if>
      <if test="record.expressNumber != null" >
        expressNumber = #{record.expressNumber,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ylfs_order_delivery_info
    set orderID = #{record.orderID,jdbcType=INTEGER},
      state = #{record.state,jdbcType=SMALLINT},
      deliverName = #{record.deliverName,jdbcType=VARCHAR},
      deliverPhone = #{record.deliverPhone,jdbcType=VARCHAR},
      deliverAddress = #{record.deliverAddress,jdbcType=VARCHAR},
      deliveryTime = #{record.deliveryTime,jdbcType=BIGINT},
      expressName = #{record.expressName,jdbcType=VARCHAR},
      expressNumber = #{record.expressNumber,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.springboot.entity.OrderDeliveryInfo" >
    update ylfs_order_delivery_info
    <set >
      <if test="state != null" >
        state = #{state,jdbcType=SMALLINT},
      </if>
      <if test="deliverName != null" >
        deliverName = #{deliverName,jdbcType=VARCHAR},
      </if>
      <if test="deliverPhone != null" >
        deliverPhone = #{deliverPhone,jdbcType=VARCHAR},
      </if>
      <if test="deliverAddress != null" >
        deliverAddress = #{deliverAddress,jdbcType=VARCHAR},
      </if>
      <if test="deliveryTime != null" >
        deliveryTime = #{deliveryTime,jdbcType=BIGINT},
      </if>
      <if test="expressName != null" >
        expressName = #{expressName,jdbcType=VARCHAR},
      </if>
      <if test="expressNumber != null" >
        expressNumber = #{expressNumber,jdbcType=VARCHAR},
      </if>
    </set>
    where orderID = #{orderID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.springboot.entity.OrderDeliveryInfo" >
    update ylfs_order_delivery_info
    set state = #{state,jdbcType=SMALLINT},
      deliverName = #{deliverName,jdbcType=VARCHAR},
      deliverPhone = #{deliverPhone,jdbcType=VARCHAR},
      deliverAddress = #{deliverAddress,jdbcType=VARCHAR},
      deliveryTime = #{deliveryTime,jdbcType=BIGINT},
      expressName = #{expressName,jdbcType=VARCHAR},
      expressNumber = #{expressNumber,jdbcType=VARCHAR}
    where orderID = #{orderID,jdbcType=INTEGER}
  </update>
</mapper>